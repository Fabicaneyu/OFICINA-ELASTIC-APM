var _dec, _dec2, _class, _class2, _temp;

import { Router } from '@angular/router';
import { Injectable } from '@angular/core';
import { scheduleMicroTask } from '@elastic/apm-rum-core';
export var ApmService = (_dec = Injectable({
  providedIn: 'root'
}), _dec2 = Reflect.metadata("design:paramtypes", [typeof Router === "undefined" ? Object : Router]), _dec(_class = _dec2(_class = (_temp = _class2 = function () {
  function ApmService(router) {
    this.router = router;
  }

  var _proto = ApmService.prototype;

  _proto.init = function init(config) {
    var apmInstance = ApmService.apm.init(config);
    var configService = ApmService.apm.serviceFactory.getService('ConfigService');

    if (!configService.isActive()) {
      return apmInstance;
    }

    this.observe();
    return apmInstance;
  };

  _proto.observe = function observe() {
    var _this = this;

    var transaction;
    this.router.events.subscribe(function (event) {
      var eventName = event.toString();

      if (eventName.indexOf('NavigationStart') >= 0) {
        var name = event.url;
        transaction = ApmService.apm.startTransaction(name, 'route-change', {
          managed: true,
          canReuse: true
        });
      } else if (eventName.indexOf('NavigationError') >= 0) {
        transaction && transaction.detectFinish();
      } else if (eventName.indexOf('NavigationEnd') >= 0) {
        if (!transaction) {
          return;
        }

        var route = _this.router.routerState.root.firstChild;

        if (route) {
          var child = route;
          var path = '/' + child.routeConfig.path;

          while (child) {
            child = child.firstChild;

            if (child && child.routeConfig) {
              var currentPath = child.routeConfig.path;

              if (currentPath) {
                path += '/' + currentPath;
              }
            }
          }

          transaction.name = path;
        }

        scheduleMicroTask(function () {
          return transaction.detectFinish();
        });
      }
    });
  };

  return ApmService;
}(), _class2.apm = void 0, _temp)) || _class) || _class);