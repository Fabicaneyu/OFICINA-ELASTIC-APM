"use strict";

exports.__esModule = true;
exports.default = void 0;

var _apmServer = _interopRequireDefault(require("./apm-server"));

var _configService = _interopRequireDefault(require("./config-service"));

var _loggingService = _interopRequireDefault(require("./logging-service"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ServiceFactory = function () {
  function ServiceFactory() {
    this._serviceCreators = {};
    this._serviceInstances = {};
    this.initialized = false;
  }

  var _proto = ServiceFactory.prototype;

  _proto.registerCoreServices = function registerCoreServices() {
    var serviceFactory = this;
    this.registerServiceCreator('ConfigService', function () {
      return new _configService.default();
    });
    this.registerServiceCreator('LoggingService', function () {
      return new _loggingService.default({
        prefix: '[Elastic APM] '
      });
    });
    this.registerServiceCreator('ApmServer', function () {
      return new _apmServer.default(serviceFactory.getService('ConfigService'), serviceFactory.getService('LoggingService'));
    });
  };

  _proto.init = function init() {
    if (this.initialized) {
      return;
    }

    this.initialized = true;
    var configService = this.getService('ConfigService');
    configService.init();
    var loggingService = this.getService('LoggingService');

    function setLogLevel(loggingService, configService) {
      var debug = configService.get('debug');
      var logLevel = configService.get('logLevel');

      if (debug === true && logLevel !== 'trace') {
        loggingService.setLevel('debug');
      } else {
        loggingService.setLevel(logLevel);
      }
    }

    setLogLevel(loggingService, configService);
    configService.events.observe(_constants.CONFIG_CHANGE, function () {
      setLogLevel(loggingService, configService);
    });
    var apmServer = this.getService('ApmServer');
    apmServer.init();
  };

  _proto.registerServiceCreator = function registerServiceCreator(name, creator) {
    this._serviceCreators[name] = creator;
  };

  _proto.registerServiceInstance = function registerServiceInstance(name, instance) {
    this._serviceInstances[name] = instance;
  };

  _proto.getService = function getService(name) {
    if (!this._serviceInstances[name]) {
      if (typeof this._serviceCreators[name] === 'function') {
        this._serviceInstances[name] = this._serviceCreators[name](this);
      } else {
        throw new Error('Can not get service, No creator for: ' + name);
      }
    }

    return this._serviceInstances[name];
  };

  return ServiceFactory;
}();

var _default = ServiceFactory;
exports.default = _default;